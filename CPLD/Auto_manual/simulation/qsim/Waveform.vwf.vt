// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/16/2017 00:05:48"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Auto_manual
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Auto_manual_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg MCU_Chan1;
reg MCU_Chan2;
reg MCU_Chan3;
reg MCU_Chan4;
reg RCV_Chan1;
reg RCV_Chan2;
reg RCV_Chan3;
reg RCV_Chan4;
reg RCV_Chan5;
// wires                                               
wire Chan1;
wire Chan2;
wire Chan3;
wire Chan4;
wire [31:0] test;
wire Trigger;

// assign statements (if any)                          
Auto_manual i1 (
// port map - connection between master ports and signals/registers   
	.Chan1(Chan1),
	.Chan2(Chan2),
	.Chan3(Chan3),
	.Chan4(Chan4),
	.clk(clk),
	.MCU_Chan1(MCU_Chan1),
	.MCU_Chan2(MCU_Chan2),
	.MCU_Chan3(MCU_Chan3),
	.MCU_Chan4(MCU_Chan4),
	.RCV_Chan1(RCV_Chan1),
	.RCV_Chan2(RCV_Chan2),
	.RCV_Chan3(RCV_Chan3),
	.RCV_Chan4(RCV_Chan4),
	.RCV_Chan5(RCV_Chan5),
	.test(test),
	.Trigger(Trigger)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #2500 1'b1;
	#2500;
end 

// RCV_Chan1
always
begin
	RCV_Chan1 = 1'b0;
	RCV_Chan1 = #35000 1'b1;
	#15000;
end 

// RCV_Chan2
always
begin
	RCV_Chan2 = 1'b0;
	RCV_Chan2 = #35000 1'b1;
	#15000;
end 

// RCV_Chan3
always
begin
	RCV_Chan3 = 1'b0;
	RCV_Chan3 = #35000 1'b1;
	#15000;
end 

// RCV_Chan4
always
begin
	RCV_Chan4 = 1'b0;
	RCV_Chan4 = #35000 1'b1;
	#15000;
end 

// RCV_Chan5
initial
begin
	repeat(7)
	begin
		RCV_Chan5 = 1'b0;
		RCV_Chan5 = #45000 1'b1;
		# 5000;
	end
	repeat(8)
	begin
		RCV_Chan5 = 1'b0;
		RCV_Chan5 = #30000 1'b1;
		# 20000;
	end
	RCV_Chan5 = 1'b0;
	RCV_Chan5 = #45000 1'b1;
	# 5000;
	repeat(4)
	begin
		RCV_Chan5 = 1'b0;
		RCV_Chan5 = #45000 1'b1;
		# 5000;
	end
end 

// MCU_Chan1
always
begin
	MCU_Chan1 = 1'b0;
	MCU_Chan1 = #40000 1'b1;
	#10000;
end 

// MCU_Chan2
always
begin
	MCU_Chan2 = 1'b0;
	MCU_Chan2 = #40000 1'b1;
	#10000;
end 

// MCU_Chan3
always
begin
	MCU_Chan3 = 1'b0;
	MCU_Chan3 = #40000 1'b1;
	#10000;
end 

// MCU_Chan4
always
begin
	MCU_Chan4 = 1'b0;
	MCU_Chan4 = #40000 1'b1;
	#10000;
end 
endmodule

